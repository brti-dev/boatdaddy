// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  DRIVER
  RIDER
  ADMIN
}

enum Provider {
  PASSWORD
  GOOGLE
  MOCK
}

// Gives permission to perform the specified `role`
model Actor {
  id Int @id @default(autoincrement())
  role Role
  isActive Boolean @default(true) // Determines if the current action is actionable; False means the action has been banned or turned off
  userId Int
  user User @relation(fields: [userId], references: [id])
  ridesAsDriver Ride[] @relation("Driver")
  ridesAsRider Ride[] @relation("Rider")
}

// Access to login and session
model Identity {
  id Int @default(autoincrement()) @id
  userId Int @map(name: "user_id")
  provider Provider
  providerId String? @map(name: "provider_id")
  providerAccountId String? @map(name: "provider_account_id")
  refreshToken String? @map(name: "refresh_token")
  accessToken String? @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  password String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  user User @relation(fields: [userId], references: [id])

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

// Site account
model Profile {
  id Int @id @default(autoincrement())
  name String
  birthday DateTime @db.Date
  isDaddy Boolean
  hasBoat Boolean
  bio String?
  aboutBoat String?
  boatImage String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
}

model Ride {
  id Int @id @default(autoincrement())
  startedAt DateTime @default(now())
  finishedAt DateTime?
  driver Actor @relation("Driver", fields: [driverId], references: [id])
  driverId Int
  rider Actor @relation("Rider", fields: [riderId], references: [id])
  riderId Int
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
  user User @relation(fields: [userId], references: [id])

	// method: String
	// givenName: String
	// name: String
	// email: Email
	// id: Int
	// level: UserLevel

  @@map(name: "sessions")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  emailVerified DateTime? @map(name: "email_verified")
  image String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  sessions Session[]
  identity Identity?
  actor Actor[]
  profile Profile?
  
  @@map(name: "users") // Maps NextAuth table
}
